/* This file was generated by SableCC (http://www.sablecc.org/). */

package min15.node;

import min15.analysis.*;

@SuppressWarnings("nls")
public final class ADivFactor extends PFactor
{
    private PFactor _factor_;
    private TSlash _slash_;
    private TEol _eol_;
    private PRightUnaryExp _rightUnaryExp_;

    public ADivFactor()
    {
        // Constructor
    }

    public ADivFactor(
        @SuppressWarnings("hiding") PFactor _factor_,
        @SuppressWarnings("hiding") TSlash _slash_,
        @SuppressWarnings("hiding") TEol _eol_,
        @SuppressWarnings("hiding") PRightUnaryExp _rightUnaryExp_)
    {
        // Constructor
        setFactor(_factor_);

        setSlash(_slash_);

        setEol(_eol_);

        setRightUnaryExp(_rightUnaryExp_);

    }

    @Override
    public Object clone()
    {
        return new ADivFactor(
            cloneNode(this._factor_),
            cloneNode(this._slash_),
            cloneNode(this._eol_),
            cloneNode(this._rightUnaryExp_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADivFactor(this);
    }

    public PFactor getFactor()
    {
        return this._factor_;
    }

    public void setFactor(PFactor node)
    {
        if(this._factor_ != null)
        {
            this._factor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._factor_ = node;
    }

    public TSlash getSlash()
    {
        return this._slash_;
    }

    public void setSlash(TSlash node)
    {
        if(this._slash_ != null)
        {
            this._slash_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._slash_ = node;
    }

    public TEol getEol()
    {
        return this._eol_;
    }

    public void setEol(TEol node)
    {
        if(this._eol_ != null)
        {
            this._eol_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eol_ = node;
    }

    public PRightUnaryExp getRightUnaryExp()
    {
        return this._rightUnaryExp_;
    }

    public void setRightUnaryExp(PRightUnaryExp node)
    {
        if(this._rightUnaryExp_ != null)
        {
            this._rightUnaryExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightUnaryExp_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._factor_)
            + toString(this._slash_)
            + toString(this._eol_)
            + toString(this._rightUnaryExp_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._factor_ == child)
        {
            this._factor_ = null;
            return;
        }

        if(this._slash_ == child)
        {
            this._slash_ = null;
            return;
        }

        if(this._eol_ == child)
        {
            this._eol_ = null;
            return;
        }

        if(this._rightUnaryExp_ == child)
        {
            this._rightUnaryExp_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._factor_ == oldChild)
        {
            setFactor((PFactor) newChild);
            return;
        }

        if(this._slash_ == oldChild)
        {
            setSlash((TSlash) newChild);
            return;
        }

        if(this._eol_ == oldChild)
        {
            setEol((TEol) newChild);
            return;
        }

        if(this._rightUnaryExp_ == oldChild)
        {
            setRightUnaryExp((PRightUnaryExp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
