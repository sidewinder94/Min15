/* This file was generated by SableCC (http://www.sablecc.org/). */

package min15.node;

import min15.analysis.*;

@SuppressWarnings("nls")
public final class AOrExp extends PExp
{
    private PExp _exp_;
    private TOr _or_;
    private TEol _eol_;
    private PConjunction _conjunction_;

    public AOrExp()
    {
        // Constructor
    }

    public AOrExp(
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TOr _or_,
        @SuppressWarnings("hiding") TEol _eol_,
        @SuppressWarnings("hiding") PConjunction _conjunction_)
    {
        // Constructor
        setExp(_exp_);

        setOr(_or_);

        setEol(_eol_);

        setConjunction(_conjunction_);

    }

    @Override
    public Object clone()
    {
        return new AOrExp(
            cloneNode(this._exp_),
            cloneNode(this._or_),
            cloneNode(this._eol_),
            cloneNode(this._conjunction_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOrExp(this);
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TOr getOr()
    {
        return this._or_;
    }

    public void setOr(TOr node)
    {
        if(this._or_ != null)
        {
            this._or_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._or_ = node;
    }

    public TEol getEol()
    {
        return this._eol_;
    }

    public void setEol(TEol node)
    {
        if(this._eol_ != null)
        {
            this._eol_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eol_ = node;
    }

    public PConjunction getConjunction()
    {
        return this._conjunction_;
    }

    public void setConjunction(PConjunction node)
    {
        if(this._conjunction_ != null)
        {
            this._conjunction_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conjunction_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._exp_)
            + toString(this._or_)
            + toString(this._eol_)
            + toString(this._conjunction_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._or_ == child)
        {
            this._or_ = null;
            return;
        }

        if(this._eol_ == child)
        {
            this._eol_ = null;
            return;
        }

        if(this._conjunction_ == child)
        {
            this._conjunction_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._or_ == oldChild)
        {
            setOr((TOr) newChild);
            return;
        }

        if(this._eol_ == oldChild)
        {
            setEol((TEol) newChild);
            return;
        }

        if(this._conjunction_ == oldChild)
        {
            setConjunction((PConjunction) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
