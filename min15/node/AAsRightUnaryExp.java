/* This file was generated by SableCC (http://www.sablecc.org/). */

package min15.node;

import min15.analysis.*;

@SuppressWarnings("nls")
public final class AAsRightUnaryExp extends PRightUnaryExp
{
    private PRightUnaryExp _rightUnaryExp_;
    private TAs _as_;
    private TClassName _className_;

    public AAsRightUnaryExp()
    {
        // Constructor
    }

    public AAsRightUnaryExp(
        @SuppressWarnings("hiding") PRightUnaryExp _rightUnaryExp_,
        @SuppressWarnings("hiding") TAs _as_,
        @SuppressWarnings("hiding") TClassName _className_)
    {
        // Constructor
        setRightUnaryExp(_rightUnaryExp_);

        setAs(_as_);

        setClassName(_className_);

    }

    @Override
    public Object clone()
    {
        return new AAsRightUnaryExp(
            cloneNode(this._rightUnaryExp_),
            cloneNode(this._as_),
            cloneNode(this._className_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAsRightUnaryExp(this);
    }

    public PRightUnaryExp getRightUnaryExp()
    {
        return this._rightUnaryExp_;
    }

    public void setRightUnaryExp(PRightUnaryExp node)
    {
        if(this._rightUnaryExp_ != null)
        {
            this._rightUnaryExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightUnaryExp_ = node;
    }

    public TAs getAs()
    {
        return this._as_;
    }

    public void setAs(TAs node)
    {
        if(this._as_ != null)
        {
            this._as_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._as_ = node;
    }

    public TClassName getClassName()
    {
        return this._className_;
    }

    public void setClassName(TClassName node)
    {
        if(this._className_ != null)
        {
            this._className_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._className_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._rightUnaryExp_)
            + toString(this._as_)
            + toString(this._className_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._rightUnaryExp_ == child)
        {
            this._rightUnaryExp_ = null;
            return;
        }

        if(this._as_ == child)
        {
            this._as_ = null;
            return;
        }

        if(this._className_ == child)
        {
            this._className_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._rightUnaryExp_ == oldChild)
        {
            setRightUnaryExp((PRightUnaryExp) newChild);
            return;
        }

        if(this._as_ == oldChild)
        {
            setAs((TAs) newChild);
            return;
        }

        if(this._className_ == oldChild)
        {
            setClassName((TClassName) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
