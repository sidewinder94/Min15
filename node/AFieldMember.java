/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import java.util.*;
import analysis.*;

@SuppressWarnings("nls")
public final class AFieldMember extends PMember
{
    private final LinkedList<TEol> _eols_ = new LinkedList<TEol>();
    private TVar _var_;
    private TFieldName _fieldName_;
    private TEol _eol_;

    public AFieldMember()
    {
        // Constructor
    }

    public AFieldMember(
        @SuppressWarnings("hiding") List<?> _eols_,
        @SuppressWarnings("hiding") TVar _var_,
        @SuppressWarnings("hiding") TFieldName _fieldName_,
        @SuppressWarnings("hiding") TEol _eol_)
    {
        // Constructor
        setEols(_eols_);

        setVar(_var_);

        setFieldName(_fieldName_);

        setEol(_eol_);

    }

    @Override
    public Object clone()
    {
        return new AFieldMember(
            cloneList(this._eols_),
            cloneNode(this._var_),
            cloneNode(this._fieldName_),
            cloneNode(this._eol_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFieldMember(this);
    }

    public LinkedList<TEol> getEols()
    {
        return this._eols_;
    }

    public void setEols(List<?> list)
    {
        for(TEol e : this._eols_)
        {
            e.parent(null);
        }
        this._eols_.clear();

        for(Object obj_e : list)
        {
            TEol e = (TEol) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._eols_.add(e);
        }
    }

    public TVar getVar()
    {
        return this._var_;
    }

    public void setVar(TVar node)
    {
        if(this._var_ != null)
        {
            this._var_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._var_ = node;
    }

    public TFieldName getFieldName()
    {
        return this._fieldName_;
    }

    public void setFieldName(TFieldName node)
    {
        if(this._fieldName_ != null)
        {
            this._fieldName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fieldName_ = node;
    }

    public TEol getEol()
    {
        return this._eol_;
    }

    public void setEol(TEol node)
    {
        if(this._eol_ != null)
        {
            this._eol_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eol_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._eols_)
            + toString(this._var_)
            + toString(this._fieldName_)
            + toString(this._eol_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._eols_.remove(child))
        {
            return;
        }

        if(this._var_ == child)
        {
            this._var_ = null;
            return;
        }

        if(this._fieldName_ == child)
        {
            this._fieldName_ = null;
            return;
        }

        if(this._eol_ == child)
        {
            this._eol_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<TEol> i = this._eols_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TEol) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._var_ == oldChild)
        {
            setVar((TVar) newChild);
            return;
        }

        if(this._fieldName_ == oldChild)
        {
            setFieldName((TFieldName) newChild);
            return;
        }

        if(this._eol_ == oldChild)
        {
            setEol((TEol) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
