/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import java.util.*;
import analysis.*;

@SuppressWarnings("nls")
public final class ASelfCallStmt extends PStmt
{
    private final LinkedList<TEol> _eols_ = new LinkedList<TEol>();
    private PSelfCall _selfCall_;
    private TEol _eol_;

    public ASelfCallStmt()
    {
        // Constructor
    }

    public ASelfCallStmt(
        @SuppressWarnings("hiding") List<?> _eols_,
        @SuppressWarnings("hiding") PSelfCall _selfCall_,
        @SuppressWarnings("hiding") TEol _eol_)
    {
        // Constructor
        setEols(_eols_);

        setSelfCall(_selfCall_);

        setEol(_eol_);

    }

    @Override
    public Object clone()
    {
        return new ASelfCallStmt(
            cloneList(this._eols_),
            cloneNode(this._selfCall_),
            cloneNode(this._eol_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASelfCallStmt(this);
    }

    public LinkedList<TEol> getEols()
    {
        return this._eols_;
    }

    public void setEols(List<?> list)
    {
        for(TEol e : this._eols_)
        {
            e.parent(null);
        }
        this._eols_.clear();

        for(Object obj_e : list)
        {
            TEol e = (TEol) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._eols_.add(e);
        }
    }

    public PSelfCall getSelfCall()
    {
        return this._selfCall_;
    }

    public void setSelfCall(PSelfCall node)
    {
        if(this._selfCall_ != null)
        {
            this._selfCall_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._selfCall_ = node;
    }

    public TEol getEol()
    {
        return this._eol_;
    }

    public void setEol(TEol node)
    {
        if(this._eol_ != null)
        {
            this._eol_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eol_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._eols_)
            + toString(this._selfCall_)
            + toString(this._eol_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._eols_.remove(child))
        {
            return;
        }

        if(this._selfCall_ == child)
        {
            this._selfCall_ = null;
            return;
        }

        if(this._eol_ == child)
        {
            this._eol_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<TEol> i = this._eols_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TEol) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._selfCall_ == oldChild)
        {
            setSelfCall((PSelfCall) newChild);
            return;
        }

        if(this._eol_ == oldChild)
        {
            setEol((TEol) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
