/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AWhileStmt extends PStmt
{
    private TWhile _while_;
    private TEol _eol1_;
    private PExp _exp_;
    private TEol _eol2_;
    private TDo _do_;
    private TEol _eol3_;
    private PStmts _stmts_;
    private TEnd _end_;
    private TEol _eol4_;

    public AWhileStmt()
    {
        // Constructor
    }

    public AWhileStmt(
        @SuppressWarnings("hiding") TWhile _while_,
        @SuppressWarnings("hiding") TEol _eol1_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TEol _eol2_,
        @SuppressWarnings("hiding") TDo _do_,
        @SuppressWarnings("hiding") TEol _eol3_,
        @SuppressWarnings("hiding") PStmts _stmts_,
        @SuppressWarnings("hiding") TEnd _end_,
        @SuppressWarnings("hiding") TEol _eol4_)
    {
        // Constructor
        setWhile(_while_);

        setEol1(_eol1_);

        setExp(_exp_);

        setEol2(_eol2_);

        setDo(_do_);

        setEol3(_eol3_);

        setStmts(_stmts_);

        setEnd(_end_);

        setEol4(_eol4_);

    }

    @Override
    public Object clone()
    {
        return new AWhileStmt(
            cloneNode(this._while_),
            cloneNode(this._eol1_),
            cloneNode(this._exp_),
            cloneNode(this._eol2_),
            cloneNode(this._do_),
            cloneNode(this._eol3_),
            cloneNode(this._stmts_),
            cloneNode(this._end_),
            cloneNode(this._eol4_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWhileStmt(this);
    }

    public TWhile getWhile()
    {
        return this._while_;
    }

    public void setWhile(TWhile node)
    {
        if(this._while_ != null)
        {
            this._while_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._while_ = node;
    }

    public TEol getEol1()
    {
        return this._eol1_;
    }

    public void setEol1(TEol node)
    {
        if(this._eol1_ != null)
        {
            this._eol1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eol1_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TEol getEol2()
    {
        return this._eol2_;
    }

    public void setEol2(TEol node)
    {
        if(this._eol2_ != null)
        {
            this._eol2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eol2_ = node;
    }

    public TDo getDo()
    {
        return this._do_;
    }

    public void setDo(TDo node)
    {
        if(this._do_ != null)
        {
            this._do_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._do_ = node;
    }

    public TEol getEol3()
    {
        return this._eol3_;
    }

    public void setEol3(TEol node)
    {
        if(this._eol3_ != null)
        {
            this._eol3_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eol3_ = node;
    }

    public PStmts getStmts()
    {
        return this._stmts_;
    }

    public void setStmts(PStmts node)
    {
        if(this._stmts_ != null)
        {
            this._stmts_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stmts_ = node;
    }

    public TEnd getEnd()
    {
        return this._end_;
    }

    public void setEnd(TEnd node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    public TEol getEol4()
    {
        return this._eol4_;
    }

    public void setEol4(TEol node)
    {
        if(this._eol4_ != null)
        {
            this._eol4_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eol4_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._while_)
            + toString(this._eol1_)
            + toString(this._exp_)
            + toString(this._eol2_)
            + toString(this._do_)
            + toString(this._eol3_)
            + toString(this._stmts_)
            + toString(this._end_)
            + toString(this._eol4_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._while_ == child)
        {
            this._while_ = null;
            return;
        }

        if(this._eol1_ == child)
        {
            this._eol1_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._eol2_ == child)
        {
            this._eol2_ = null;
            return;
        }

        if(this._do_ == child)
        {
            this._do_ = null;
            return;
        }

        if(this._eol3_ == child)
        {
            this._eol3_ = null;
            return;
        }

        if(this._stmts_ == child)
        {
            this._stmts_ = null;
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        if(this._eol4_ == child)
        {
            this._eol4_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._while_ == oldChild)
        {
            setWhile((TWhile) newChild);
            return;
        }

        if(this._eol1_ == oldChild)
        {
            setEol1((TEol) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._eol2_ == oldChild)
        {
            setEol2((TEol) newChild);
            return;
        }

        if(this._do_ == oldChild)
        {
            setDo((TDo) newChild);
            return;
        }

        if(this._eol3_ == oldChild)
        {
            setEol3((TEol) newChild);
            return;
        }

        if(this._stmts_ == oldChild)
        {
            setStmts((PStmts) newChild);
            return;
        }

        if(this._end_ == oldChild)
        {
            setEnd((TEnd) newChild);
            return;
        }

        if(this._eol4_ == oldChild)
        {
            setEol4((TEol) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
