/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AAddArithExp extends PArithExp
{
    private PArithExp _arithExp_;
    private TPlus _plus_;
    private TEol _eol_;
    private PFactor _factor_;

    public AAddArithExp()
    {
        // Constructor
    }

    public AAddArithExp(
        @SuppressWarnings("hiding") PArithExp _arithExp_,
        @SuppressWarnings("hiding") TPlus _plus_,
        @SuppressWarnings("hiding") TEol _eol_,
        @SuppressWarnings("hiding") PFactor _factor_)
    {
        // Constructor
        setArithExp(_arithExp_);

        setPlus(_plus_);

        setEol(_eol_);

        setFactor(_factor_);

    }

    @Override
    public Object clone()
    {
        return new AAddArithExp(
            cloneNode(this._arithExp_),
            cloneNode(this._plus_),
            cloneNode(this._eol_),
            cloneNode(this._factor_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAddArithExp(this);
    }

    public PArithExp getArithExp()
    {
        return this._arithExp_;
    }

    public void setArithExp(PArithExp node)
    {
        if(this._arithExp_ != null)
        {
            this._arithExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arithExp_ = node;
    }

    public TPlus getPlus()
    {
        return this._plus_;
    }

    public void setPlus(TPlus node)
    {
        if(this._plus_ != null)
        {
            this._plus_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._plus_ = node;
    }

    public TEol getEol()
    {
        return this._eol_;
    }

    public void setEol(TEol node)
    {
        if(this._eol_ != null)
        {
            this._eol_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eol_ = node;
    }

    public PFactor getFactor()
    {
        return this._factor_;
    }

    public void setFactor(PFactor node)
    {
        if(this._factor_ != null)
        {
            this._factor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._factor_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._arithExp_)
            + toString(this._plus_)
            + toString(this._eol_)
            + toString(this._factor_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._arithExp_ == child)
        {
            this._arithExp_ = null;
            return;
        }

        if(this._plus_ == child)
        {
            this._plus_ = null;
            return;
        }

        if(this._eol_ == child)
        {
            this._eol_ = null;
            return;
        }

        if(this._factor_ == child)
        {
            this._factor_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._arithExp_ == oldChild)
        {
            setArithExp((PArithExp) newChild);
            return;
        }

        if(this._plus_ == oldChild)
        {
            setPlus((TPlus) newChild);
            return;
        }

        if(this._eol_ == oldChild)
        {
            setEol((TEol) newChild);
            return;
        }

        if(this._factor_ == oldChild)
        {
            setFactor((PFactor) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
