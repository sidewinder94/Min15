/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPFile().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAFile(AFile node)
    {
        defaultIn(node);
    }

    public void outAFile(AFile node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFile(AFile node)
    {
        inAFile(node);
        {
            List<PClassDef> copy = new ArrayList<PClassDef>(node.getClassDefs());
            for(PClassDef e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStmts() != null)
        {
            node.getStmts().apply(this);
        }
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEols());
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        outAFile(node);
    }

    public void inAClassDef(AClassDef node)
    {
        defaultIn(node);
    }

    public void outAClassDef(AClassDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassDef(AClassDef node)
    {
        inAClassDef(node);
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEols1());
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getClassKeyword() != null)
        {
            node.getClassKeyword().apply(this);
        }
        if(node.getClassName() != null)
        {
            node.getClassName().apply(this);
        }
        if(node.getSuperDecl() != null)
        {
            node.getSuperDecl().apply(this);
        }
        if(node.getEol1() != null)
        {
            node.getEol1().apply(this);
        }
        {
            List<PMember> copy = new ArrayList<PMember>(node.getMembers());
            for(PMember e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEols2());
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getEol2() != null)
        {
            node.getEol2().apply(this);
        }
        outAClassDef(node);
    }

    public void inASuperDecl(ASuperDecl node)
    {
        defaultIn(node);
    }

    public void outASuperDecl(ASuperDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuperDecl(ASuperDecl node)
    {
        inASuperDecl(node);
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        if(node.getSuper() != null)
        {
            node.getSuper().apply(this);
        }
        if(node.getClassName() != null)
        {
            node.getClassName().apply(this);
        }
        outASuperDecl(node);
    }

    public void inAFieldMember(AFieldMember node)
    {
        defaultIn(node);
    }

    public void outAFieldMember(AFieldMember node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldMember(AFieldMember node)
    {
        inAFieldMember(node);
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEols());
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getFieldName() != null)
        {
            node.getFieldName().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        outAFieldMember(node);
    }

    public void inAMethodMember(AMethodMember node)
    {
        defaultIn(node);
    }

    public void outAMethodMember(AMethodMember node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodMember(AMethodMember node)
    {
        inAMethodMember(node);
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEols());
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFun() != null)
        {
            node.getFun().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getParams() != null)
        {
            node.getParams().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getReturnDecl() != null)
        {
            node.getReturnDecl().apply(this);
        }
        if(node.getEol1() != null)
        {
            node.getEol1().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getEol2() != null)
        {
            node.getEol2().apply(this);
        }
        if(node.getStmts() != null)
        {
            node.getStmts().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getEol3() != null)
        {
            node.getEol3().apply(this);
        }
        outAMethodMember(node);
    }

    public void inAOperatorMember(AOperatorMember node)
    {
        defaultIn(node);
    }

    public void outAOperatorMember(AOperatorMember node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperatorMember(AOperatorMember node)
    {
        inAOperatorMember(node);
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEols());
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFun() != null)
        {
            node.getFun().apply(this);
        }
        if(node.getOperator() != null)
        {
            node.getOperator().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getParams() != null)
        {
            node.getParams().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getReturnDecl() != null)
        {
            node.getReturnDecl().apply(this);
        }
        if(node.getEol1() != null)
        {
            node.getEol1().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getEol2() != null)
        {
            node.getEol2().apply(this);
        }
        if(node.getStmts() != null)
        {
            node.getStmts().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getEol3() != null)
        {
            node.getEol3().apply(this);
        }
        outAOperatorMember(node);
    }

    public void inAInternMethodMember(AInternMethodMember node)
    {
        defaultIn(node);
    }

    public void outAInternMethodMember(AInternMethodMember node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInternMethodMember(AInternMethodMember node)
    {
        inAInternMethodMember(node);
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEols());
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIntern() != null)
        {
            node.getIntern().apply(this);
        }
        if(node.getFun() != null)
        {
            node.getFun().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getParams() != null)
        {
            node.getParams().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getReturnDecl() != null)
        {
            node.getReturnDecl().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        outAInternMethodMember(node);
    }

    public void inAInternOperatorMember(AInternOperatorMember node)
    {
        defaultIn(node);
    }

    public void outAInternOperatorMember(AInternOperatorMember node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInternOperatorMember(AInternOperatorMember node)
    {
        inAInternOperatorMember(node);
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEols());
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIntern() != null)
        {
            node.getIntern().apply(this);
        }
        if(node.getFun() != null)
        {
            node.getFun().apply(this);
        }
        if(node.getOperator() != null)
        {
            node.getOperator().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getParams() != null)
        {
            node.getParams().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getReturnDecl() != null)
        {
            node.getReturnDecl().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        outAInternOperatorMember(node);
    }

    public void inAParams(AParams node)
    {
        defaultIn(node);
    }

    public void outAParams(AParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParams(AParams node)
    {
        inAParams(node);
        if(node.getEol1() != null)
        {
            node.getEol1().apply(this);
        }
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        {
            List<PAdditionalParam> copy = new ArrayList<PAdditionalParam>(node.getAdditionalParams());
            for(PAdditionalParam e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getEol2() != null)
        {
            node.getEol2().apply(this);
        }
        outAParams(node);
    }

    public void inAAdditionalParam(AAdditionalParam node)
    {
        defaultIn(node);
    }

    public void outAAdditionalParam(AAdditionalParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditionalParam(AAdditionalParam node)
    {
        inAAdditionalParam(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        if(node.getParam() != null)
        {
            node.getParam().apply(this);
        }
        outAAdditionalParam(node);
    }

    public void inAParam(AParam node)
    {
        defaultIn(node);
    }

    public void outAParam(AParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParam(AParam node)
    {
        inAParam(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getClassName() != null)
        {
            node.getClassName().apply(this);
        }
        outAParam(node);
    }

    public void inAReturnDecl(AReturnDecl node)
    {
        defaultIn(node);
    }

    public void outAReturnDecl(AReturnDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnDecl(AReturnDecl node)
    {
        inAReturnDecl(node);
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getClassName() != null)
        {
            node.getClassName().apply(this);
        }
        outAReturnDecl(node);
    }

    public void inAEqOperator(AEqOperator node)
    {
        defaultIn(node);
    }

    public void outAEqOperator(AEqOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqOperator(AEqOperator node)
    {
        inAEqOperator(node);
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        outAEqOperator(node);
    }

    public void inANeqOperator(ANeqOperator node)
    {
        defaultIn(node);
    }

    public void outANeqOperator(ANeqOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeqOperator(ANeqOperator node)
    {
        inANeqOperator(node);
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        outANeqOperator(node);
    }

    public void inALtOperator(ALtOperator node)
    {
        defaultIn(node);
    }

    public void outALtOperator(ALtOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtOperator(ALtOperator node)
    {
        inALtOperator(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outALtOperator(node);
    }

    public void inAGtOperator(AGtOperator node)
    {
        defaultIn(node);
    }

    public void outAGtOperator(AGtOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtOperator(AGtOperator node)
    {
        inAGtOperator(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAGtOperator(node);
    }

    public void inALteqOperator(ALteqOperator node)
    {
        defaultIn(node);
    }

    public void outALteqOperator(ALteqOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALteqOperator(ALteqOperator node)
    {
        inALteqOperator(node);
        if(node.getLteq() != null)
        {
            node.getLteq().apply(this);
        }
        outALteqOperator(node);
    }

    public void inAGteqOperator(AGteqOperator node)
    {
        defaultIn(node);
    }

    public void outAGteqOperator(AGteqOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGteqOperator(AGteqOperator node)
    {
        inAGteqOperator(node);
        if(node.getGteq() != null)
        {
            node.getGteq().apply(this);
        }
        outAGteqOperator(node);
    }

    public void inAPlusOperator(APlusOperator node)
    {
        defaultIn(node);
    }

    public void outAPlusOperator(APlusOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusOperator(APlusOperator node)
    {
        inAPlusOperator(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusOperator(node);
    }

    public void inAMinusOperator(AMinusOperator node)
    {
        defaultIn(node);
    }

    public void outAMinusOperator(AMinusOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusOperator(AMinusOperator node)
    {
        inAMinusOperator(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusOperator(node);
    }

    public void inAStarOperator(AStarOperator node)
    {
        defaultIn(node);
    }

    public void outAStarOperator(AStarOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarOperator(AStarOperator node)
    {
        inAStarOperator(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAStarOperator(node);
    }

    public void inASlashOperator(ASlashOperator node)
    {
        defaultIn(node);
    }

    public void outASlashOperator(ASlashOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASlashOperator(ASlashOperator node)
    {
        inASlashOperator(node);
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        outASlashOperator(node);
    }

    public void inAPercentOperator(APercentOperator node)
    {
        defaultIn(node);
    }

    public void outAPercentOperator(APercentOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPercentOperator(APercentOperator node)
    {
        inAPercentOperator(node);
        if(node.getPercent() != null)
        {
            node.getPercent().apply(this);
        }
        outAPercentOperator(node);
    }

    public void inAStmts(AStmts node)
    {
        defaultIn(node);
    }

    public void outAStmts(AStmts node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmts(AStmts node)
    {
        inAStmts(node);
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmts());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        outAStmts(node);
    }

    public void inAVarDefStmt(AVarDefStmt node)
    {
        defaultIn(node);
    }

    public void outAVarDefStmt(AVarDefStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDefStmt(AVarDefStmt node)
    {
        inAVarDefStmt(node);
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEols());
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getClassName() != null)
        {
            node.getClassName().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        outAVarDefStmt(node);
    }

    public void inAVarInitStmt(AVarInitStmt node)
    {
        defaultIn(node);
    }

    public void outAVarInitStmt(AVarInitStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarInitStmt(AVarInitStmt node)
    {
        inAVarInitStmt(node);
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEols());
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getEol1() != null)
        {
            node.getEol1().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getEol2() != null)
        {
            node.getEol2().apply(this);
        }
        outAVarInitStmt(node);
    }

    public void inAVarAssignStmt(AVarAssignStmt node)
    {
        defaultIn(node);
    }

    public void outAVarAssignStmt(AVarAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarAssignStmt(AVarAssignStmt node)
    {
        inAVarAssignStmt(node);
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEols());
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getEol1() != null)
        {
            node.getEol1().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getEol2() != null)
        {
            node.getEol2().apply(this);
        }
        outAVarAssignStmt(node);
    }

    public void inAFieldAssignStmt(AFieldAssignStmt node)
    {
        defaultIn(node);
    }

    public void outAFieldAssignStmt(AFieldAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldAssignStmt(AFieldAssignStmt node)
    {
        inAFieldAssignStmt(node);
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEols());
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFieldName() != null)
        {
            node.getFieldName().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getEol1() != null)
        {
            node.getEol1().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getEol2() != null)
        {
            node.getEol2().apply(this);
        }
        outAFieldAssignStmt(node);
    }

    public void inACallStmt(ACallStmt node)
    {
        defaultIn(node);
    }

    public void outACallStmt(ACallStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallStmt(ACallStmt node)
    {
        inACallStmt(node);
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEols());
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getCall() != null)
        {
            node.getCall().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        outACallStmt(node);
    }

    public void inASelfCallStmt(ASelfCallStmt node)
    {
        defaultIn(node);
    }

    public void outASelfCallStmt(ASelfCallStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelfCallStmt(ASelfCallStmt node)
    {
        inASelfCallStmt(node);
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEols());
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSelfCall() != null)
        {
            node.getSelfCall().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        outASelfCallStmt(node);
    }

    public void inAWhileStmt(AWhileStmt node)
    {
        defaultIn(node);
    }

    public void outAWhileStmt(AWhileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmt(AWhileStmt node)
    {
        inAWhileStmt(node);
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEols());
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getEol1() != null)
        {
            node.getEol1().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getEol2() != null)
        {
            node.getEol2().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getEol3() != null)
        {
            node.getEol3().apply(this);
        }
        if(node.getStmts() != null)
        {
            node.getStmts().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getEol4() != null)
        {
            node.getEol4().apply(this);
        }
        outAWhileStmt(node);
    }

    public void inAIfStmt(AIfStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStmt(AIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        inAIfStmt(node);
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEols());
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getEol1() != null)
        {
            node.getEol1().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getEol2() != null)
        {
            node.getEol2().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getEol3() != null)
        {
            node.getEol3().apply(this);
        }
        if(node.getStmts() != null)
        {
            node.getStmts().apply(this);
        }
        if(node.getElsePart() != null)
        {
            node.getElsePart().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getEol4() != null)
        {
            node.getEol4().apply(this);
        }
        outAIfStmt(node);
    }

    public void inAReturnStmt(AReturnStmt node)
    {
        defaultIn(node);
    }

    public void outAReturnStmt(AReturnStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStmt(AReturnStmt node)
    {
        inAReturnStmt(node);
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEols());
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        outAReturnStmt(node);
    }

    public void inAElsePart(AElsePart node)
    {
        defaultIn(node);
    }

    public void outAElsePart(AElsePart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElsePart(AElsePart node)
    {
        inAElsePart(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        if(node.getStmts() != null)
        {
            node.getStmts().apply(this);
        }
        outAElsePart(node);
    }

    public void inAOrExp(AOrExp node)
    {
        defaultIn(node);
    }

    public void outAOrExp(AOrExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExp(AOrExp node)
    {
        inAOrExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        if(node.getConjunction() != null)
        {
            node.getConjunction().apply(this);
        }
        outAOrExp(node);
    }

    public void inASimpleExp(ASimpleExp node)
    {
        defaultIn(node);
    }

    public void outASimpleExp(ASimpleExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleExp(ASimpleExp node)
    {
        inASimpleExp(node);
        if(node.getConjunction() != null)
        {
            node.getConjunction().apply(this);
        }
        outASimpleExp(node);
    }

    public void inAAndConjunction(AAndConjunction node)
    {
        defaultIn(node);
    }

    public void outAAndConjunction(AAndConjunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndConjunction(AAndConjunction node)
    {
        inAAndConjunction(node);
        if(node.getConjunction() != null)
        {
            node.getConjunction().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outAAndConjunction(node);
    }

    public void inASimpleConjunction(ASimpleConjunction node)
    {
        defaultIn(node);
    }

    public void outASimpleConjunction(ASimpleConjunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleConjunction(ASimpleConjunction node)
    {
        inASimpleConjunction(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outASimpleConjunction(node);
    }

    public void inAEqComparison(AEqComparison node)
    {
        defaultIn(node);
    }

    public void outAEqComparison(AEqComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqComparison(AEqComparison node)
    {
        inAEqComparison(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        if(node.getArithExp() != null)
        {
            node.getArithExp().apply(this);
        }
        outAEqComparison(node);
    }

    public void inANeqComparison(ANeqComparison node)
    {
        defaultIn(node);
    }

    public void outANeqComparison(ANeqComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeqComparison(ANeqComparison node)
    {
        inANeqComparison(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        if(node.getArithExp() != null)
        {
            node.getArithExp().apply(this);
        }
        outANeqComparison(node);
    }

    public void inALtComparison(ALtComparison node)
    {
        defaultIn(node);
    }

    public void outALtComparison(ALtComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtComparison(ALtComparison node)
    {
        inALtComparison(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        if(node.getArithExp() != null)
        {
            node.getArithExp().apply(this);
        }
        outALtComparison(node);
    }

    public void inAGtComparison(AGtComparison node)
    {
        defaultIn(node);
    }

    public void outAGtComparison(AGtComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtComparison(AGtComparison node)
    {
        inAGtComparison(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        if(node.getArithExp() != null)
        {
            node.getArithExp().apply(this);
        }
        outAGtComparison(node);
    }

    public void inALteqComparison(ALteqComparison node)
    {
        defaultIn(node);
    }

    public void outALteqComparison(ALteqComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALteqComparison(ALteqComparison node)
    {
        inALteqComparison(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getLteq() != null)
        {
            node.getLteq().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        if(node.getArithExp() != null)
        {
            node.getArithExp().apply(this);
        }
        outALteqComparison(node);
    }

    public void inAGteqComparison(AGteqComparison node)
    {
        defaultIn(node);
    }

    public void outAGteqComparison(AGteqComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGteqComparison(AGteqComparison node)
    {
        inAGteqComparison(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getGteq() != null)
        {
            node.getGteq().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        if(node.getArithExp() != null)
        {
            node.getArithExp().apply(this);
        }
        outAGteqComparison(node);
    }

    public void inAIsComparison(AIsComparison node)
    {
        defaultIn(node);
    }

    public void outAIsComparison(AIsComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIsComparison(AIsComparison node)
    {
        inAIsComparison(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getIs() != null)
        {
            node.getIs().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        if(node.getArithExp() != null)
        {
            node.getArithExp().apply(this);
        }
        outAIsComparison(node);
    }

    public void inASimpleComparison(ASimpleComparison node)
    {
        defaultIn(node);
    }

    public void outASimpleComparison(ASimpleComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleComparison(ASimpleComparison node)
    {
        inASimpleComparison(node);
        if(node.getArithExp() != null)
        {
            node.getArithExp().apply(this);
        }
        outASimpleComparison(node);
    }

    public void inAAddArithExp(AAddArithExp node)
    {
        defaultIn(node);
    }

    public void outAAddArithExp(AAddArithExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddArithExp(AAddArithExp node)
    {
        inAAddArithExp(node);
        if(node.getArithExp() != null)
        {
            node.getArithExp().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAAddArithExp(node);
    }

    public void inASubArithExp(ASubArithExp node)
    {
        defaultIn(node);
    }

    public void outASubArithExp(ASubArithExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubArithExp(ASubArithExp node)
    {
        inASubArithExp(node);
        if(node.getArithExp() != null)
        {
            node.getArithExp().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outASubArithExp(node);
    }

    public void inASimpleArithExp(ASimpleArithExp node)
    {
        defaultIn(node);
    }

    public void outASimpleArithExp(ASimpleArithExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleArithExp(ASimpleArithExp node)
    {
        inASimpleArithExp(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outASimpleArithExp(node);
    }

    public void inAMulFactor(AMulFactor node)
    {
        defaultIn(node);
    }

    public void outAMulFactor(AMulFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulFactor(AMulFactor node)
    {
        inAMulFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        if(node.getLeftUnaryExp() != null)
        {
            node.getLeftUnaryExp().apply(this);
        }
        outAMulFactor(node);
    }

    public void inADivFactor(ADivFactor node)
    {
        defaultIn(node);
    }

    public void outADivFactor(ADivFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivFactor(ADivFactor node)
    {
        inADivFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        if(node.getLeftUnaryExp() != null)
        {
            node.getLeftUnaryExp().apply(this);
        }
        outADivFactor(node);
    }

    public void inAModFactor(AModFactor node)
    {
        defaultIn(node);
    }

    public void outAModFactor(AModFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModFactor(AModFactor node)
    {
        inAModFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getPercent() != null)
        {
            node.getPercent().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        if(node.getLeftUnaryExp() != null)
        {
            node.getLeftUnaryExp().apply(this);
        }
        outAModFactor(node);
    }

    public void inASimpleFactor(ASimpleFactor node)
    {
        defaultIn(node);
    }

    public void outASimpleFactor(ASimpleFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleFactor(ASimpleFactor node)
    {
        inASimpleFactor(node);
        if(node.getLeftUnaryExp() != null)
        {
            node.getLeftUnaryExp().apply(this);
        }
        outASimpleFactor(node);
    }

    public void inANotLeftUnaryExp(ANotLeftUnaryExp node)
    {
        defaultIn(node);
    }

    public void outANotLeftUnaryExp(ANotLeftUnaryExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotLeftUnaryExp(ANotLeftUnaryExp node)
    {
        inANotLeftUnaryExp(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getLeftUnaryExp() != null)
        {
            node.getLeftUnaryExp().apply(this);
        }
        outANotLeftUnaryExp(node);
    }

    public void inANegLeftUnaryExp(ANegLeftUnaryExp node)
    {
        defaultIn(node);
    }

    public void outANegLeftUnaryExp(ANegLeftUnaryExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegLeftUnaryExp(ANegLeftUnaryExp node)
    {
        inANegLeftUnaryExp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getLeftUnaryExp() != null)
        {
            node.getLeftUnaryExp().apply(this);
        }
        outANegLeftUnaryExp(node);
    }

    public void inASimpleLeftUnaryExp(ASimpleLeftUnaryExp node)
    {
        defaultIn(node);
    }

    public void outASimpleLeftUnaryExp(ASimpleLeftUnaryExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleLeftUnaryExp(ASimpleLeftUnaryExp node)
    {
        inASimpleLeftUnaryExp(node);
        if(node.getRightUnaryExp() != null)
        {
            node.getRightUnaryExp().apply(this);
        }
        outASimpleLeftUnaryExp(node);
    }

    public void inACallRightUnaryExp(ACallRightUnaryExp node)
    {
        defaultIn(node);
    }

    public void outACallRightUnaryExp(ACallRightUnaryExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallRightUnaryExp(ACallRightUnaryExp node)
    {
        inACallRightUnaryExp(node);
        if(node.getCall() != null)
        {
            node.getCall().apply(this);
        }
        outACallRightUnaryExp(node);
    }

    public void inAIsaRightUnaryExp(AIsaRightUnaryExp node)
    {
        defaultIn(node);
    }

    public void outAIsaRightUnaryExp(AIsaRightUnaryExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIsaRightUnaryExp(AIsaRightUnaryExp node)
    {
        inAIsaRightUnaryExp(node);
        if(node.getRightUnaryExp() != null)
        {
            node.getRightUnaryExp().apply(this);
        }
        if(node.getIsa() != null)
        {
            node.getIsa().apply(this);
        }
        if(node.getClassName() != null)
        {
            node.getClassName().apply(this);
        }
        outAIsaRightUnaryExp(node);
    }

    public void inAAsRightUnaryExp(AAsRightUnaryExp node)
    {
        defaultIn(node);
    }

    public void outAAsRightUnaryExp(AAsRightUnaryExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAsRightUnaryExp(AAsRightUnaryExp node)
    {
        inAAsRightUnaryExp(node);
        if(node.getRightUnaryExp() != null)
        {
            node.getRightUnaryExp().apply(this);
        }
        if(node.getAs() != null)
        {
            node.getAs().apply(this);
        }
        if(node.getClassName() != null)
        {
            node.getClassName().apply(this);
        }
        outAAsRightUnaryExp(node);
    }

    public void inASimpleRightUnaryExp(ASimpleRightUnaryExp node)
    {
        defaultIn(node);
    }

    public void outASimpleRightUnaryExp(ASimpleRightUnaryExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleRightUnaryExp(ASimpleRightUnaryExp node)
    {
        inASimpleRightUnaryExp(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outASimpleRightUnaryExp(node);
    }

    public void inASelfCallTerm(ASelfCallTerm node)
    {
        defaultIn(node);
    }

    public void outASelfCallTerm(ASelfCallTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelfCallTerm(ASelfCallTerm node)
    {
        inASelfCallTerm(node);
        if(node.getSelfCall() != null)
        {
            node.getSelfCall().apply(this);
        }
        outASelfCallTerm(node);
    }

    public void inAParTerm(AParTerm node)
    {
        defaultIn(node);
    }

    public void outAParTerm(AParTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParTerm(AParTerm node)
    {
        inAParTerm(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getEol1() != null)
        {
            node.getEol1().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getEol2() != null)
        {
            node.getEol2().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAParTerm(node);
    }

    public void inANewTerm(ANewTerm node)
    {
        defaultIn(node);
    }

    public void outANewTerm(ANewTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewTerm(ANewTerm node)
    {
        inANewTerm(node);
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        if(node.getClassName() != null)
        {
            node.getClassName().apply(this);
        }
        outANewTerm(node);
    }

    public void inAFieldTerm(AFieldTerm node)
    {
        defaultIn(node);
    }

    public void outAFieldTerm(AFieldTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldTerm(AFieldTerm node)
    {
        inAFieldTerm(node);
        if(node.getFieldName() != null)
        {
            node.getFieldName().apply(this);
        }
        outAFieldTerm(node);
    }

    public void inAVarTerm(AVarTerm node)
    {
        defaultIn(node);
    }

    public void outAVarTerm(AVarTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarTerm(AVarTerm node)
    {
        inAVarTerm(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVarTerm(node);
    }

    public void inANumTerm(ANumTerm node)
    {
        defaultIn(node);
    }

    public void outANumTerm(ANumTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumTerm(ANumTerm node)
    {
        inANumTerm(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumTerm(node);
    }

    public void inANullTerm(ANullTerm node)
    {
        defaultIn(node);
    }

    public void outANullTerm(ANullTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANullTerm(ANullTerm node)
    {
        inANullTerm(node);
        if(node.getNull() != null)
        {
            node.getNull().apply(this);
        }
        outANullTerm(node);
    }

    public void inASelfTerm(ASelfTerm node)
    {
        defaultIn(node);
    }

    public void outASelfTerm(ASelfTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelfTerm(ASelfTerm node)
    {
        inASelfTerm(node);
        if(node.getSelf() != null)
        {
            node.getSelf().apply(this);
        }
        outASelfTerm(node);
    }

    public void inATrueTerm(ATrueTerm node)
    {
        defaultIn(node);
    }

    public void outATrueTerm(ATrueTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueTerm(ATrueTerm node)
    {
        inATrueTerm(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueTerm(node);
    }

    public void inAFalseTerm(AFalseTerm node)
    {
        defaultIn(node);
    }

    public void outAFalseTerm(AFalseTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseTerm(AFalseTerm node)
    {
        inAFalseTerm(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseTerm(node);
    }

    public void inAStringTerm(AStringTerm node)
    {
        defaultIn(node);
    }

    public void outAStringTerm(AStringTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTerm(AStringTerm node)
    {
        inAStringTerm(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringTerm(node);
    }

    public void inACall(ACall node)
    {
        defaultIn(node);
    }

    public void outACall(ACall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACall(ACall node)
    {
        inACall(node);
        if(node.getRightUnaryExp() != null)
        {
            node.getRightUnaryExp().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outACall(node);
    }

    public void inASelfCall(ASelfCall node)
    {
        defaultIn(node);
    }

    public void outASelfCall(ASelfCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASelfCall(ASelfCall node)
    {
        inASelfCall(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outASelfCall(node);
    }

    public void inAArgs(AArgs node)
    {
        defaultIn(node);
    }

    public void outAArgs(AArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgs(AArgs node)
    {
        inAArgs(node);
        if(node.getEol1() != null)
        {
            node.getEol1().apply(this);
        }
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        {
            List<PAdditionalArg> copy = new ArrayList<PAdditionalArg>(node.getAdditionalArgs());
            for(PAdditionalArg e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getEol2() != null)
        {
            node.getEol2().apply(this);
        }
        outAArgs(node);
    }

    public void inAAdditionalArg(AAdditionalArg node)
    {
        defaultIn(node);
    }

    public void outAAdditionalArg(AAdditionalArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditionalArg(AAdditionalArg node)
    {
        inAAdditionalArg(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        if(node.getArg() != null)
        {
            node.getArg().apply(this);
        }
        outAAdditionalArg(node);
    }

    public void inAArg(AArg node)
    {
        defaultIn(node);
    }

    public void outAArg(AArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArg(AArg node)
    {
        inAArg(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAArg(node);
    }
}
