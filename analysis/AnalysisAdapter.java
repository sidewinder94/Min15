/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFile(AFile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClassDef(AClassDef node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASuperDecl(ASuperDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFieldMember(AFieldMember node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMethodMember(AMethodMember node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOperatorMember(AOperatorMember node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInternMethodMember(AInternMethodMember node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInternOperatorMember(AInternOperatorMember node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParams(AParams node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAdditionalParam(AAdditionalParam node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParam(AParam node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnDecl(AReturnDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqOperator(AEqOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANeqOperator(ANeqOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALtOperator(ALtOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGtOperator(AGtOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALteqOperator(ALteqOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGteqOperator(AGteqOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusOperator(APlusOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusOperator(AMinusOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStarOperator(AStarOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASlashOperator(ASlashOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPercentOperator(APercentOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStmts(AStmts node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyStmt(AEmptyStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarDefStmt(AVarDefStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarInitStmt(AVarInitStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarAssignStmt(AVarAssignStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFieldAssignStmt(AFieldAssignStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACallStmt(ACallStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASelfCallStmt(ASelfCallStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileStmt(AWhileStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnStmt(AReturnStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElsePart(AElsePart node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrExp(AOrExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleExp(ASimpleExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndConjunction(AAndConjunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleConjunction(ASimpleConjunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqComparison(AEqComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANeqComparison(ANeqComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALtComparison(ALtComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGtComparison(AGtComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALteqComparison(ALteqComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGteqComparison(AGteqComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIsComparison(AIsComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleComparison(ASimpleComparison node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAddArithExp(AAddArithExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubArithExp(ASubArithExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleArithExp(ASimpleArithExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMulFactor(AMulFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivFactor(ADivFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModFactor(AModFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleFactor(ASimpleFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotLeftUnaryExp(ANotLeftUnaryExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANegLeftUnaryExp(ANegLeftUnaryExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleLeftUnaryExp(ASimpleLeftUnaryExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACallRightUnaryExp(ACallRightUnaryExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIsaRightUnaryExp(AIsaRightUnaryExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAsRightUnaryExp(AAsRightUnaryExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleRightUnaryExp(ASimpleRightUnaryExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASelfCallTerm(ASelfCallTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParTerm(AParTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANewTerm(ANewTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFieldTerm(AFieldTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarTerm(AVarTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumTerm(ANumTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANullTerm(ANullTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASelfTerm(ASelfTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATrueTerm(ATrueTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFalseTerm(AFalseTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringTerm(AStringTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACall(ACall node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASelfCall(ASelfCall node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArgs(AArgs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAdditionalArg(AAdditionalArg node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArg(AArg node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTClass(TClass node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSuper(TSuper node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVar(TVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFun(TFun node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntern(TIntern node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEnd(TEnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIs(TIs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIsa(TIsa node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAs(TAs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNew(TNew node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNull(TNull node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSelf(TSelf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStar(TStar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSlash(TSlash node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPercent(TPercent node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNeq(TNeq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLteq(TLteq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGteq(TGteq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTClassName(TClassName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFieldName(TFieldName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInvalidFieldName(TInvalidFieldName node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInvalidNumber(TInvalidNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInvalidString(TInvalidString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEol(TEol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
